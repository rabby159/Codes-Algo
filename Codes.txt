#include<bits/stdc++.h>

using namespace std;
const int N = 9999;

vector <int> parent(N);

void make_set(int v){

    parent [v]=v;

}
int find_set(int v){

    if(v ==parent[v])
        return v;
    else
        return find_set(parent[v]);

}
void union_set(int a, int b){

    int x = find_set(a);
    int y = find_set(b);

    if(x!=y){
        parent[b]=a;
    }

}
int main(){
    bool flag=false;
    int n,m;
    int cost=0;
    cin >> n >> m;

    for(int i=0; i<N; i++)
        make_set(i);

    vector<vector<int>>edges;
    for(int i =0; i<m; i++)
        {
        int u,v,w;
        cin >> u >>v >> w;
        edges. push_back({w,u,v});
        }
        
    sort(edges.begin(),edges.end());

    for(auto i : edges){
        
        int w = i[0];
        int u = i[1];
        int v = i[2];

        int x = find_set(u);
        int y = find_set(v);

        if( x == y)
            continue;
        else{
            cout<< i[0];
            cout<< i[1];
            cout<< i[2];
            cout<<u<<" "<<v<<"\n";
            cost = cost+w;
            union_set(u,v);
            
        }

    }
    
    cout <<"Cost=" << cost;
}